{"AutoImageProcessor": "type", "DEVICE": "str", "Image": "module", "MobileNetV1Model": "type", "PIL": "module", "SEED": "int", "SSIM": "ABCMeta", "config": "Config", "folder_path_removed": "str", "folder_path_shadow": "str", "get_ipython": "function", "img_shadow": "list", "load_images_from_folder": "function", "lpips": "module", "n_images": "int", "nn": "module", "np": "module", "os": "module", "plt": "module", "torch": "module", "tqdm": "type", "train_test_split": "function", "transforms": "module", "wandb": "module"}
{"AutoImageProcessor": "type", "DEVICE": "str", "Image": "module", "MobileNetV1Model": "type", "PIL": "module", "SEED": "int", "SSIM": "ABCMeta", "config": "Config", "folder_path_removed": "str", "folder_path_shadow": "str", "get_ipython": "function", "img_shadow": "list", "load_images_from_folder": "function", "lpips": "module", "n_images": "int", "nn": "module", "np": "module", "os": "module", "plt": "module", "torch": "module", "tqdm": "type", "train_test_split": "function", "transforms": "module", "wandb": "module"}
torch.Size([900, 3, 256, 192]) torch.Size([100, 3, 256, 192]) torch.Size([900, 3, 256, 192]) torch.Size([100, 3, 256, 192])
Setting up [LPIPS] perceptual loss: trunk [alex], v[0.1], spatial [off]
/home2/sreenivas88/miniconda3/lib/python3.12/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/home2/sreenivas88/miniconda3/lib/python3.12/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=AlexNet_Weights.IMAGENET1K_V1`. You can also use `weights=AlexNet_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Loading model from: /home2/sreenivas88/miniconda3/lib/python3.12/site-packages/lpips/weights/v0.1/alex.pth
  0%|          | 0/90 [00:00<?, ?it/s]
model size: 969.097MB
Training started


































100%|██████████| 90/90 [01:17<00:00,  1.16it/s]
Epoch 0/50: |>train_loss: 14.20475542280409, val_loss: 13.297239303588867, val_accuracy: 0.18948933482170105
Original Image
Epoch 2/50
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).

































100%|██████████| 90/90 [01:08<00:00,  1.32it/s]
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 0/90 [00:00<?, ?it/s]
Epoch 1/50: |>train_loss: 14.202346176571316, val_loss: 13.248305320739746, val_accuracy: 0.19081564247608185
Original Image


































100%|██████████| 90/90 [01:08<00:00,  1.32it/s]
Epoch 2/50: |>train_loss: 14.205378585391575, val_loss: 13.335110664367676, val_accuracy: 0.19344082474708557
Original Image
Epoch 4/50
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).























 67%|██████▋   | 60/90 [00:45<00:22,  1.31it/s]
{"AutoImageProcessor": "type", "CoordAtt": "type", "DEVICE": "str", "DecoderBlock": "type", "Image": "module", "MobileNetV1Model": "type", "PIL": "module", "SEED": "int", "SSIM": "ABCMeta", "UnetWithAT": "type", "UnetWithoutAT": "type", "X_test": "Tensor", "X_train": "Tensor", "Y_test": "Tensor", "Y_train": "Tensor", "accuracy": "function", "buffer": "Tensor", "buffer_size": "int", "config": "Config", "folder_path_removed": "str", "folder_path_shadow": "str", "get_decoder_layers": "function", "get_encoder_layers": "function", "get_ipython": "function", "get_loss": "function", "h_sigmoid": "type", "h_swish": "type", "img_removed": "Tensor", "img_shadow": "Tensor", "load_images_from_folder": "function", "loss1": "L1Loss", "loss_layer": "function", "loss_weights": "tuple", "lpips": "module", "lpips_layer": "LPIPS", "model": "DataParallel", "n_images": "int", "nn": "module", "norm_mean": "list", "norm_std": "list", "np": "module", "optimizer": "Adam", "os": "module", "param": "Parameter", "param_size": "int", "plt": "module", "size_all_mb": "float", "torch": "module", "tqdm": "type", "train_dataset": "TensorDataset", "train_loader": "DataLoader", "train_test_split": "function", "training": "function", "transform": "Compose", "transforms": "module", "val_dataset": "TensorDataset", "val_loader": "DataLoader", "wandb": "module"}
{"AutoImageProcessor": "type", "CoordAtt": "type", "DEVICE": "str", "DecoderBlock": "type", "Image": "module", "MobileNetV1Model": "type", "PIL": "module", "SEED": "int", "SSIM": "ABCMeta", "UnetWithAT": "type", "UnetWithoutAT": "type", "X_test": "Tensor", "X_train": "Tensor", "Y_test": "Tensor", "Y_train": "Tensor", "accuracy": "function", "buffer": "Tensor", "buffer_size": "int", "config": "Config", "folder_path_removed": "str", "folder_path_shadow": "str", "get_decoder_layers": "function", "get_encoder_layers": "function", "get_ipython": "function", "get_loss": "function", "h_sigmoid": "type", "h_swish": "type", "img_removed": "Tensor", "img_shadow": "Tensor", "load_images_from_folder": "function", "loss1": "L1Loss", "loss_layer": "function", "loss_weights": "tuple", "lpips": "module", "lpips_layer": "LPIPS", "model": "DataParallel", "n_images": "int", "nn": "module", "norm_mean": "list", "norm_std": "list", "np": "module", "optimizer": "Adam", "os": "module", "param": "Parameter", "param_size": "int", "plt": "module", "size_all_mb": "float", "torch": "module", "tqdm": "type", "train_dataset": "TensorDataset", "train_loader": "DataLoader", "train_test_split": "function", "training": "function", "transform": "Compose", "transforms": "module", "val_dataset": "TensorDataset", "val_loader": "DataLoader", "wandb": "module"}
{"AutoImageProcessor": "type", "CoordAtt": "type", "DEVICE": "str", "DecoderBlock": "type", "Image": "module", "MobileNetV1Model": "type", "PIL": "module", "SEED": "int", "SSIM": "ABCMeta", "UnetWithAT": "type", "UnetWithoutAT": "type", "X_test": "Tensor", "X_train": "Tensor", "Y_test": "Tensor", "Y_train": "Tensor", "accuracy": "function", "buffer": "Tensor", "buffer_size": "int", "config": "Config", "folder_path_removed": "str", "folder_path_shadow": "str", "get_decoder_layers": "function", "get_encoder_layers": "function", "get_ipython": "function", "get_loss": "function", "h_sigmoid": "type", "h_swish": "type", "img_removed": "Tensor", "img_shadow": "Tensor", "load_images_from_folder": "function", "loss1": "L1Loss", "loss_layer": "function", "loss_weights": "tuple", "lpips": "module", "lpips_layer": "LPIPS", "model": "DataParallel", "n_images": "int", "nn": "module", "norm_mean": "list", "norm_std": "list", "np": "module", "optimizer": "Adam", "os": "module", "param": "Parameter", "param_size": "int", "plt": "module", "size_all_mb": "float", "torch": "module", "tqdm": "type", "train_dataset": "TensorDataset", "train_loader": "DataLoader", "train_test_split": "function", "training": "function", "transform": "Compose", "transforms": "module", "val_dataset": "TensorDataset", "val_loader": "DataLoader", "wandb": "module"}
{"AutoImageProcessor": "type", "CoordAtt": "type", "DEVICE": "str", "DecoderBlock": "type", "Image": "module", "MobileNetV1Model": "type", "PIL": "module", "SEED": "int", "SSIM": "ABCMeta", "UnetWithAT": "type", "UnetWithoutAT": "type", "X_test": "Tensor", "X_train": "Tensor", "Y_test": "Tensor", "Y_train": "Tensor", "accuracy": "function", "buffer": "Tensor", "buffer_size": "int", "config": "Config", "folder_path_removed": "str", "folder_path_shadow": "str", "get_decoder_layers": "function", "get_encoder_layers": "function", "get_ipython": "function", "get_loss": "function", "h_sigmoid": "type", "h_swish": "type", "img_removed": "Tensor", "img_shadow": "Tensor", "load_images_from_folder": "function", "loss1": "L1Loss", "loss_layer": "function", "loss_weights": "tuple", "lpips": "module", "lpips_layer": "LPIPS", "model": "DataParallel", "n_images": "int", "nn": "module", "norm_mean": "list", "norm_std": "list", "np": "module", "optimizer": "Adam", "os": "module", "param": "Parameter", "param_size": "int", "plt": "module", "size_all_mb": "float", "torch": "module", "tqdm": "type", "train_dataset": "TensorDataset", "train_loader": "DataLoader", "train_test_split": "function", "training": "function", "transform": "Compose", "transforms": "module", "val_dataset": "TensorDataset", "val_loader": "DataLoader", "wandb": "module"}
model size: 969.097MB
  1%|          | 1/90 [00:00<01:09,  1.28it/s]
Training started

































100%|██████████| 90/90 [01:08<00:00,  1.32it/s]
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 0/90 [00:00<?, ?it/s]
Epoch 0/50: |>train_loss: 13.588556374443902, val_loss: 12.545822143554688, val_accuracy: 0.2308337241411209
Original Image


































100%|██████████| 90/90 [01:08<00:00,  1.32it/s]
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/90 [00:00<01:08,  1.29it/s]
Epoch 1/50: |>train_loss: 13.58423244688246, val_loss: 12.483173370361328, val_accuracy: 0.22938552498817444
Original Image


































100%|██████████| 90/90 [01:08<00:00,  1.32it/s]
Epoch 2/50: |>train_loss: 13.58883810043335, val_loss: 12.600173950195312, val_accuracy: 0.22974734008312225
Original Image
Epoch 4/50
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).

































100%|██████████| 90/90 [01:08<00:00,  1.32it/s]
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 0/90 [00:00<?, ?it/s]
Epoch 3/50: |>train_loss: 13.58996410369873, val_loss: 12.425732612609863, val_accuracy: 0.23782411217689514
Original Image


































100%|██████████| 90/90 [01:08<00:00,  1.32it/s]
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/90 [00:00<01:07,  1.32it/s]
Epoch 4/50: |>train_loss: 13.591060055626762, val_loss: 12.377828598022461, val_accuracy: 0.24150177836418152
Original Image

































100%|██████████| 90/90 [01:08<00:00,  1.32it/s]
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Epoch 5/50: |>train_loss: 13.587367301517062, val_loss: 12.479013442993164, val_accuracy: 0.23347711563110352
Original Image
Epoch 7/50

































100%|██████████| 90/90 [01:08<00:00,  1.31it/s]
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 0/90 [00:00<?, ?it/s]
Epoch 6/50: |>train_loss: 13.591583739386664, val_loss: 12.21469783782959, val_accuracy: 0.2434554547071457
Original Image


































100%|██████████| 90/90 [01:07<00:00,  1.33it/s]
Epoch 7/50: |>train_loss: 13.588240920172797, val_loss: 12.347683906555176, val_accuracy: 0.2420387715101242
Original Image
Epoch 9/50
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).

































100%|██████████| 90/90 [01:08<00:00,  1.32it/s]
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/90 [00:00<01:07,  1.32it/s]
Epoch 8/50: |>train_loss: 13.588692262437608, val_loss: 12.28991985321045, val_accuracy: 0.2436123788356781
Original Image


































100%|██████████| 90/90 [01:08<00:00,  1.32it/s]
Epoch 9/50: |>train_loss: 13.593334092034233, val_loss: 12.344447135925293, val_accuracy: 0.23891422152519226
Original Image
Epoch 11/50
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).

































100%|██████████| 90/90 [01:08<00:00,  1.31it/s]
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 0/90 [00:00<?, ?it/s]
Epoch 10/50: |>train_loss: 13.591247092352972, val_loss: 12.584284782409668, val_accuracy: 0.23131462931632996
Original Image


































100%|██████████| 90/90 [01:08<00:00,  1.32it/s]
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/90 [00:00<01:07,  1.32it/s]
Epoch 11/50: |>train_loss: 13.58728527492947, val_loss: 12.29061222076416, val_accuracy: 0.24236151576042175
Original Image


































100%|██████████| 90/90 [01:08<00:00,  1.31it/s]
Epoch 12/50: |>train_loss: 13.58985677295261, val_loss: 12.390607833862305, val_accuracy: 0.23384499549865723
Original Image
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/90 [00:01<01:06,  1.32it/s]

































100%|██████████| 90/90 [01:08<00:00,  1.32it/s]
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 0/90 [00:00<?, ?it/s]
Epoch 13/50: |>train_loss: 13.591862996419271, val_loss: 12.463294982910156, val_accuracy: 0.23503875732421875
Original Image


































100%|██████████| 90/90 [01:08<00:00,  1.31it/s]
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/90 [00:00<01:08,  1.30it/s]
Epoch 14/50: |>train_loss: 13.587279817793105, val_loss: 12.43297004699707, val_accuracy: 0.2368583232164383
Original Image

































100%|██████████| 90/90 [01:08<00:00,  1.32it/s]
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Epoch 15/50: |>train_loss: 13.590020688374837, val_loss: 12.473869323730469, val_accuracy: 0.23372872173786163
Original Image
Epoch 17/50

































100%|██████████| 90/90 [01:08<00:00,  1.31it/s]
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 0/90 [00:00<?, ?it/s]
Epoch 16/50: |>train_loss: 13.59292812347412, val_loss: 12.418566703796387, val_accuracy: 0.23730190098285675
Original Image


































100%|██████████| 90/90 [01:08<00:00,  1.32it/s]
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/90 [00:00<01:07,  1.32it/s]
Epoch 17/50: |>train_loss: 13.590388096703423, val_loss: 12.429316520690918, val_accuracy: 0.2347361296415329
Original Image

































100%|██████████| 90/90 [01:08<00:00,  1.31it/s]
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Epoch 18/50: |>train_loss: 13.591977193620469, val_loss: 12.325613975524902, val_accuracy: 0.2339700162410736
Original Image
Epoch 20/50

































100%|██████████| 90/90 [01:08<00:00,  1.32it/s]
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  1%|          | 1/90 [00:00<01:07,  1.32it/s]
Epoch 19/50: |>train_loss: 13.59130114449395, val_loss: 12.250031471252441, val_accuracy: 0.23796427249908447
Original Image


































100%|██████████| 90/90 [01:08<00:00,  1.32it/s]
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/90 [00:01<01:06,  1.32it/s]
Epoch 20/50: |>train_loss: 13.59213711420695, val_loss: 12.526674270629883, val_accuracy: 0.23460721969604492
Original Image
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]
  8%|▊         | 7/90 [00:05<01:02,  1.33it/s]
 11%|█         | 10/90 [00:07<01:00,  1.33it/s]
 13%|█▎        | 12/90 [00:09<00:58,  1.33it/s]
 17%|█▋        | 15/90 [00:11<00:56,  1.33it/s]
 20%|██        | 18/90 [00:13<00:54,  1.33it/s]
 22%|██▏       | 20/90 [00:15<00:52,  1.33it/s]
 26%|██▌       | 23/90 [00:17<00:50,  1.33it/s]
 29%|██▉       | 26/90 [00:19<00:48,  1.33it/s]
 31%|███       | 28/90 [00:21<00:46,  1.33it/s]
 34%|███▍      | 31/90 [00:23<00:44,  1.33it/s]
 38%|███▊      | 34/90 [00:25<00:42,  1.33it/s]
 40%|████      | 36/90 [00:27<00:40,  1.33it/s]
 43%|████▎     | 39/90 [00:29<00:38,  1.32it/s]
 46%|████▌     | 41/90 [00:30<00:36,  1.33it/s]
 49%|████▉     | 44/90 [00:33<00:34,  1.33it/s]
 52%|█████▏    | 47/90 [00:35<00:32,  1.33it/s]
 54%|█████▍    | 49/90 [00:36<00:30,  1.33it/s]
 58%|█████▊    | 52/90 [00:39<00:28,  1.33it/s]
 61%|██████    | 55/90 [00:41<00:26,  1.33it/s]
 63%|██████▎   | 57/90 [00:42<00:24,  1.33it/s]
 67%|██████▋   | 60/90 [00:45<00:22,  1.33it/s]
 70%|███████   | 63/90 [00:47<00:20,  1.29it/s]
 72%|███████▏  | 65/90 [00:49<00:19,  1.31it/s]
 76%|███████▌  | 68/90 [00:51<00:16,  1.32it/s]
 78%|███████▊  | 70/90 [00:52<00:15,  1.33it/s]
 81%|████████  | 73/90 [00:55<00:12,  1.33it/s]
 84%|████████▍ | 76/90 [00:57<00:10,  1.33it/s]
 87%|████████▋ | 78/90 [00:58<00:09,  1.33it/s]
 90%|█████████ | 81/90 [01:01<00:06,  1.33it/s]
 93%|█████████▎| 84/90 [01:03<00:04,  1.33it/s]
 96%|█████████▌| 86/90 [01:04<00:03,  1.33it/s]
 99%|█████████▉| 89/90 [01:07<00:00,  1.33it/s]
  0%|          | 0/90 [00:00<?, ?it/s] for imshow with RGB data ([0..1] for floats or [0..255] for integers).
  0%|          | 0/90 [00:00<?, ?it/s] for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Epoch 21/50: |>train_loss: 13.59007215499878, val_loss: 12.345431327819824, val_accuracy: 0.2383909672498703
Original Image
  3%|▎         | 3/90 [00:02<01:05,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  7%|▋         | 6/90 [00:04<01:03,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  9%|▉         | 8/90 [00:06<01:01,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
 12%|█▏        | 11/90 [00:08<00:59,  1.32it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 16%|█▌        | 14/90 [00:10<00:57,  1.33it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 18%|█▊        | 16/90 [00:12<00:55,  1.33it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 21%|██        | 19/90 [00:14<00:53,  1.33it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 23%|██▎       | 21/90 [00:16<00:54,  1.26it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 27%|██▋       | 24/90 [00:18<00:50,  1.30it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 30%|███       | 27/90 [00:20<00:47,  1.32it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 32%|███▏      | 29/90 [00:22<00:46,  1.32it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 36%|███▌      | 32/90 [00:24<00:43,  1.32it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 39%|███▉      | 35/90 [00:26<00:41,  1.33it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 41%|████      | 37/90 [00:28<00:40,  1.32it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 44%|████▍     | 40/90 [00:30<00:37,  1.32it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 48%|████▊     | 43/90 [00:32<00:35,  1.32it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 50%|█████     | 45/90 [00:34<00:33,  1.33it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 48/90 [00:36<00:31,  1.33it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 48/90 [00:36<00:31,  1.33it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 48/90 [00:36<00:31,  1.33it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 48/90 [00:36<00:31,  1.33it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 48/90 [00:36<00:31,  1.33it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 48/90 [00:36<00:31,  1.33it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 48/90 [00:36<00:31,  1.33it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 48/90 [00:36<00:31,  1.33it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 48/90 [00:36<00:31,  1.33it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 48/90 [00:36<00:31,  1.33it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 48/90 [00:36<00:31,  1.33it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 48/90 [00:36<00:31,  1.33it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 48/90 [00:36<00:31,  1.33it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 48/90 [00:36<00:31,  1.33it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 48/90 [00:36<00:31,  1.33it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 48/90 [00:36<00:31,  1.33it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
 53%|█████▎    | 48/90 [00:36<00:31,  1.33it/s]ow with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/90 [00:01<01:12,  1.21it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  2%|▏         | 2/90 [00:01<01:12,  1.21it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
Epoch 22/50: |>train_loss: 13.587288973066542, val_loss: 12.433555603027344, val_accuracy: 0.23247964680194855
Original Image
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:06,  1.29it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Epoch 23/50: |>train_loss: 13.59183512793647, val_loss: 12.278926849365234, val_accuracy: 0.23950490355491638
Original Image
Epoch 25/50
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Epoch 24/50: |>train_loss: 13.586745452880859, val_loss: 12.379594802856445, val_accuracy: 0.2380737066268921
Original Image
  2%|▏         | 2/90 [00:01<01:06,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.33it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
Epoch 25/50: |>train_loss: 13.584696070353191, val_loss: 12.500096321105957, val_accuracy: 0.2333587408065796
Original Image
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Epoch 26/50: |>train_loss: 13.58603958553738, val_loss: 12.360161781311035, val_accuracy: 0.23939922451972961
Original Image
  1%|          | 1/90 [00:00<01:07,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
Epoch 27/50: |>train_loss: 13.585129780239528, val_loss: 12.348692893981934, val_accuracy: 0.23564615845680237
Original Image
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Epoch 28/50: |>train_loss: 13.590849293602837, val_loss: 12.29358959197998, val_accuracy: 0.24150100350379944
Original Image
Epoch 30/50
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Epoch 29/50: |>train_loss: 13.588676473829482, val_loss: 12.533170700073242, val_accuracy: 0.23302920162677765
Original Image
Epoch 31/50
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Epoch 30/50: |>train_loss: 13.58701786465115, val_loss: 12.428709030151367, val_accuracy: 0.23804564774036407
Original Image
  1%|          | 1/90 [00:00<01:07,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Epoch 31/50: |>train_loss: 13.583937019772, val_loss: 12.450643539428711, val_accuracy: 0.23535266518592834
Original Image
Epoch 33/50
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Epoch 32/50: |>train_loss: 13.58623014026218, val_loss: 12.395020484924316, val_accuracy: 0.23959919810295105
Original Image
Epoch 34/50
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Epoch 33/50: |>train_loss: 13.586952283647324, val_loss: 12.30054759979248, val_accuracy: 0.23625986278057098
Original Image
Epoch 35/50
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Epoch 34/50: |>train_loss: 13.592353269788955, val_loss: 12.297552108764648, val_accuracy: 0.2422831505537033
Original Image
  2%|▏         | 2/90 [00:01<01:06,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:05,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
Epoch 35/50: |>train_loss: 13.589751232994928, val_loss: 12.644987106323242, val_accuracy: 0.22817745804786682
Original Image
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Epoch 36/50: |>train_loss: 13.591725010342069, val_loss: 12.542460441589355, val_accuracy: 0.2298779934644699
Original Image
  1%|          | 1/90 [00:00<01:07,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  4%|▍         | 4/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
Epoch 37/50: |>train_loss: 13.592380947536892, val_loss: 12.479548454284668, val_accuracy: 0.23204150795936584
Original Image
  2%|▏         | 2/90 [00:01<01:06,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
  6%|▌         | 5/90 [00:03<01:04,  1.32it/s]how with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Epoch 38/50: |>train_loss: 13.588197549184164, val_loss: 12.435401916503906, val_accuracy: 0.23786738514900208
Original Image
Epoch 40/50
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
